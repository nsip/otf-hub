# 
# runs assessment data that has been through the 
# alignment process through the levelling service
# for scoring/scaling
# 
http:
  address: 0.0.0.0:34197
  read_timeout: 5s
  root_path: /benthos
  debug_endpoints: false
input:
  type: nats_stream
  nats_stream:
    ack_wait: 30s
    batching:
      byte_size: 0
      condition:
        type: static
        static: false
      count: 1
      period: ""
      processors: []
    client_id: otf_level_benthos_client
    cluster_id: test-cluster
    durable_name: #benthos_offset
    max_inflight: 1024
    queue: #benthos_queue
    start_from_oldest: true
    subject: otf.aligned
    unsubscribe_on_close: false
    urls:
      - nats://${NATS_HOST}:4222

pipeline:
  processors:
  - process_dag:

      extract_progLevel:        
          premap: {}
          processors:
            - bloblang: |
                root = this
                meta.progressionLevel = otf.align.alignments.index(0).progressionLevel
                meta.judgement = "partial"
          postmap: 
            otf.progressionLevel: meta.progressionLevel
            otf.level.assessmentToken: meta.judgement


      xapi_level:
          conditions:
            - bloblang: this.exists("original.actor.mbox") # xapi files only
          premap:
            levelMethod: meta.levelMethod
            levelProgLevel: otf.progressionLevel
            assessmentToken: original.verb.display.en-US
          processors:
            - http:
                parallel: false 
                request:
                  url: http://${LEVELLER_HOST}:1327/level
                  headers:
                    Content-Type: application/json
                  verb: POST
          postmap:
            otf.level.levelMethod: levelMethod
            otf.level.levelServiceID: levelServiceID
            otf.level.levelServiceName: levelServiceName
            otf.level.calculatedScore: calculatedLevel
            # otf.level.assessmentScore: assessmentScore #not needed
            otf.level.assessmentToken: assessmentToken

      spa_level:
          conditions:
            - bloblang: this.meta.providerName == "SPA" # ensure is a sreams record 
          premap:
            levelMethod: meta.levelMethod
            levelProgLevel: otf.progressionLevel
            assessmentToken: original.1 
          processors:
            - http:
                parallel: false
                request:
                  url: http://${LEVELLER_HOST}:1327/level
                  headers:
                    Content-Type: application/json
                  verb: POST
          postmap:
            otf.level.levelMethod: levelMethod
            otf.level.levelServiceID: levelServiceID
            otf.level.levelServiceName: levelServiceName
            otf.level.calculatedScore: calculatedLevel
            # otf.level.assessmentScore: assessmentScore # only gives grade
            otf.level.assessmentToken: assessmentToken

      mathspathway_level:
          conditions:
            - bloblang: this.meta.providerName == "MathsPathway" # ensure is a mathspathway record 
          premap:
            levelMethod: meta.levelMethod
            levelProgLevel: otf.progressionLevel
            assessmentToken: otf.level.assessmentToken
          processors:
            - http:
                parallel: false
                request:
                  url: http://${LEVELLER_HOST}:1327/level
                  headers:
                    Content-Type: application/json
                  verb: POST
          postmap:
            otf.level.levelMethod: levelMethod
            otf.level.levelServiceID: levelServiceID
            otf.level.levelServiceName: levelServiceName
            otf.level.calculatedScore: calculatedLevel
            # otf.level.assessmentScore: assessmentScore # only gives judgement

      brightpath_level:
          conditions:
            - bloblang: this.meta.providerName == "BrightPath" # ensure is a brightpath record 
          premap:
            levelMethod: meta.levelMethod
            levelProgLevel: otf.progressionLevel
            assessmentToken: original.test.scale #otf.level.assessmentToken
            assessmentScore: original.score
          processors:
            - http:
                parallel: false
                request:
                  url: http://${LEVELLER_HOST}:1327/level
                  headers:
                    Content-Type: application/json
                  verb: POST
          postmap:
            otf.level.levelMethod: levelMethod
            otf.level.levelServiceID: levelServiceID
            otf.level.levelServiceName: levelServiceName
            otf.level.calculatedScore: calculatedLevel
            otf.level.assessmentScore: assessmentScore
            otf.level.assessmentToken: assessmentToken

  - catch:
    - log:
        message: "Processing failed due to: ${!error()}"


output:
  files:
    path: ${PDM_ROOT}/audit/level/${!count("files")}-${!timestamp_unix_nano()}.json
  processors:
    # don't save any files that did not get processed by the leveller
  - bloblang: |
      root = if !this.exists("otf.level.calculatedScore") {
        deleted()
      }    







